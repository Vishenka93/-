Научимся использовать методы объектов


const options = {
name: 'test',
width: 1024,
height: 1024,
colors: {
    border: 'black',
    bg: 'red'
}
};

console.log(options.name); получаем тест 


Если нужно удалить ключ-значение прямо из объекта, тогда нам понадобиться оператор delete

delete options.name;
console.log(options); 


Перебор всех свойств объекта (не забываем про ключ(key) значение!!!!key это name,width,height,colors )

for (let key in options) {
	console.log(`Свойства ${key} имеет значение ${options[key]} `);
}

Консоль нам выведет :   "Свойства name имеет значение test "
			"Свойства width имеет значение 1024 "
			"Свойства height имеет значение 1024 "
			"Свойства colors имеет значение [object Object]"



Перебор при помощи for of для обектов работать не будет !!!!!!!!!!!!!!!!!!!!!!!!!!!


              "Свойства colors имеет значение [object Object]"  что это было??????????????????????

Мы все значения выводим в качестве строк !!!! 
console.log(`Свойства ${key} имеет значение ${options[key]} `); оно имеет строчный тип данных, 
но одно свойств нашего объекта является тоже объектом   colors: {
    								border: 'black',
    									bg: 'red'
								}
и когда JS натыкается на такое значение он не может такой объект превратить в строку и раз у него возникает такая ошибка,
он просто возвращает такую структуру [object Object] (это строковое представление объекта)
	Когда мы перебираем все эти ключи, мы так же их внутри можем проверять при помощи условий и если условие ключа которого мы перебираем будет объектом 
мы можем запустить перебор внутри перебора, это тоже допустимо и тогда все у нас должно правильно отработать 

const options = {
(key)name: 'test',
(key)width: 1024,
(key)height: 1024,
(key)colors: {
    (i)border: 'black',
    (i)bg: 'red'
}
}

for (let key in options) {
	if (typeof(options[key]) === 'object') {					если тип данных в options[key] является объект то 
	     for (let i in options[key]) {                                              цыкл 
		console.log(`Свойства ${i} имеет значение ${options[key][i]} `);
		}
	}
	console.log(`Свойства ${key} имеет значение ${options[key]} `);	
}

	Обясниние, чтобы достучатся до colors: {
    					border: 'black',
    					bg: 'red'
					}  внутри мы можем использовать двойные квадратные скобки ${options[key][i]}
                                           это тоже самое что прописать console.log(options['colors']['border']);
То есть ${options[key][i]}  [i] это на 1 иерархию ниже чем key, key это первая вложенность, i это 2 вложенность 

Нужно еще отвлетвление 
for (let key in options) {
	if (typeof(options[key]) === 'object') {
		for (let i in options[key]) {
			console.log(`Свойства ${i} имеет значение ${options[key][i]} `);
		}
	  } else {                                                                  если ключ не будет объектом 
		console.log(`Свойства ${key} имеет значение ${options[key]} `);	
	  }
} 
                                     
			Ты научился как перебирать все свойсва объекта и все их ключи 

Похже будет изучена рекурсия!!!!!!!!!!!!!!!!!!!!!!!!!!!


	Теперь будем разбираться про функции и методы которые уже есть внутри объекта
 (чтобы узнать их все можем перейти в документацию которая прикреплена к уроку) На изусть учить не надо в течении курса изучу!!!!!!!




   Как узнать сколько свойств внутри ???????????????????????? сейчас разберем через прием счетчика
	
Прием счетчика

let counter = 0;
for (let key in options) {
	if (typeof(options[key]) === 'object') {
		for (let i in options[key]) {
			console.log(`Свойства ${i} имеет значение ${options[key][i]} `);
            counter++;
		}
	  } else {                                                                   
		console.log(`Свойства ${key} имеет значение ${options[key]} `);
        counter++;	
	  }
} 
console.log(counter);     и мы узнали сколько всего у нас свойств в объекте
	если хотим узнать только на 1 уровке 


let counter = 0;
for (let key in options) {
	if (typeof(options[key]) === 'object') {
		for (let i in options[key]) {
			console.log(`Свойства ${i} имеет значение ${options[key][i]} `);
		}
	  } else {                                                                   
		console.log(`Свойства ${key} имеет значение ${options[key]} `);
        counter++;	
	  }
}          и мы получаем 3 вместо 4 почему? потому что когда мы наткнулись на объект colors наше условие
	пошло по другой ветке } else {                                                                   
		console.log(`Свойства ${key} имеет значение ${options[key]} `);
        counter++;	
	  }

	Классический метод чтоб узнать какое количество свойств находится в объекте выглядит так 
	let counter = 0;
		for (let key in options) {
        	counter++;	
	  	} 
	console.log(counter);   но это не очень удобно с перебором поэтому мы переходим к методам
которые часто используются у объектах 

	object keys (ключи нашего объекта) как он работает, этот метод берет наш объект и на его основании
создает массив в котором все элементы это ключи находящеся в 1 иерархии

	console.log(Object.keys(options));
  (4) ['name', 'width', 'height', 'colors']  и мы получаем массив


Как у строк так и у массивов есть стойство length , при помощи которого мы можем узнать какое количество 
элементов там находится

		console.log(Object.keys(options).length); мы получаем количество элементов в массиве

            Этот метод позволит в дальнейшем секономить много времени в написании кода


	



Методы это действия которые может совершать наш объект 

const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: {
        border: 'black',
        bg: 'red'
    },
    makeTast: function() {
        console.log('Test'); 
    }
    };

    options.makeTast();


				ПОДИТОЖИМ
Объекты это структуры которые могут сохранять в себе любые типы данных в формате ключ-значение, так же 
они могут быть вложенные объекты в объекты, чтобы их перебрать мы можем использовать конструкцию for in,
в объектах бывают встроенные методы и встроенные свойства и самое главное чтобы наш объект умел что то делать 
мы может во внутрь него записывать функции и таким образом можем создавать методы нашего объекта



		Возможность которая появилась в ES6 это ДИСТРУКТОРИЗАЦИЯ ОБЪЕКТА

Мы будем вытаскивать ключи в качестве отдельных структур и будем в дальнейшем использовать 

	const {border, bg} = options.colors;
	console.log(border); в консоле получаем 'black'


			JS ЯВЛЯЕТСЯ ОБЪЕКТО-ОРИЕНТИРОВАННЫМ ЯЗЫКОМ !!!!!!!!!!!!!!!!!!!!!!!!ЗАПОМНИТЬ
