передача данных по ссылке и по значению 


	const obj = {
	a: 5,
	b: 1
	};

	const copy = obj;

	copy.a = 10;

	console.log(copy);
	console.log(obj); 
 и мы получаем            
{
  a: 10,
  b: 1
}
{
  a: 10,
  b: 1
}

2 обсолютно одинаковых объекта, хотя по идеи мы создали копию объекта и ее модифицировали и поменяли там значение a вместо 5 на 10 
а не сам изначальный объект, на примере мы видим что изменяю что то внутри копии мы модифицируем наш изначальный объект 
		

					И сейчас будем разбираться в этом феномине 
			ОСОБОЕ ВНИМАНИЕ Т.К ЕСЛИ НЕ РАЗОБРАТЬСЯ БУДУТ В ДАЛЬНЕЙШЕМ ПРОБЛЕМЫ 


Когда работаем с какими то объектами (к объектам относятка массивы функции и специфические объекты )  то у нас идет передача уже не по 
значению а по ссылке то есть тут const copy = obj;  мы не скопировали новый объект здесь в переменную copy не кладется какой то новый 
объект который индентичен структуре const obj = {
						a: 5,
						b: 1
						};  на самом деле мы здесь передаем значение по ссылке, это значит что эта запись const copy = obj;
она передает не саму структуру объекта она передает именно ССЫЛКУ, в переменную copy кладется ссылка на существующий объект obj 
и так получается что модифицырую копию мы как бы модефицируем наш изначальный объект, потому что мы работает не с копией этого
объекта а именно с ссылкой на предыдущую структуру которая была у нас в obj такое поведение называется ПЕРЕДАЧЕНЙ ПО ССЫЛКЕ


				А КАК ТОГДА СОЗДАВАТЬ КОПИИ ОБЪЕКТОВ МАССИВОВ И КОПИЙ ВСЕГО ДРУГОГО ??????
Для этого существует несколько способов 

			Самый бональный это использования цыклов


		function copy(mainObj) {
			let objCopy = {};
  
  			let key;
  			for (key in mainObj) {
  			objCopy[key] = mainObj[key];
 			 }
  
 			 return objCopy;
			}

			const numbers = {
					a: 2, 
					b: 5,
					c: {
						x: 7,
						y: 4
						}
					};


		const newNumbers = copy(numbers);

		newNumbers.a = 10;

		console.log(newNumbers);
		console.log(numbers);      и в консоли все получилось значит копия готова 


Есть одна интересная особенность, если обратиться  newNumbers.c.x = 10;  то в консоли изначальный объект и копия поменяется на 10 
		Запомнить!!!!!!!!!!!!!!!!Когда мы кланируем вот так объекты есть 2 важных понятия 
это глубокие и поверхностные копии объекта, сейчас мы создали поверхностную копию объекта, потому что она берет все обычные 
свойства которые были в родители и создает как бы независимые структуры, но как только появляется вложенная структура 
 c: {
	x: 7,
	y: 4
	}  одно из свойств будет собержать объект или массив, то это свойство будет иметь ссылочный тип данных 
тоесть где newNumbers.c.x = 10; мы обратились к .c  на самом деле мы обратились к 
	{
	x: 7,
	y: 4
	} этому объекту потому что там сохранилась на его ссылочка точно так же как было вот здесь const copy = obj; смотреть выше пример
это и называется поверхностная копия объекта, потому что мы нормально будем работать только с теми свойствами которые лежат у нас 
на первом уровне 
		ГЛУБОКИЕ КОПИИ ИЗУЧИМ ПО КУРСУ 

			
			2 Способ называется Object.assign();

	У нашего глобального типа данных object есть такой метод который позволяет соединить сразу несколько объектов, тоесть у нас есть
1 какой то большой объект и мы во внутрь хотим поместить еще один объект поменьше у которого будет еще несколько свойств и для этого
у нас используется метод Object.assign();


					
					const numbers = {
					a: 2, 
					b: 5,
					c: {
						x: 7,
						y: 4
						}
					};



				const add = {
					d: 17, 
					e: 20
					};  

		console.log(Object.assign(numbers, add));  в консоли 2 объекта у нас соединились 
   
1 аргумент мы передаем тот объект в который мы хотим все это поместить в нашем случае (numbers)
и 2 аргумент у нас идет тот который мы помещаем в нашем случае это ( add)
И самое главное что мы создали независимую поверхностную копию оюъекта и она не как не зависет не от add  не от numbers 


	Тоже самое мы можем сделать и с пустым объектом чтобы создать просто копию объекта мы теперь numbers заменяем на пустой объект 
console.log(Object.assign({}, add)); таким образом у нас создается новый объект в него помещается старый объект и мы получаем какую то уже отдельную копию 

const add = {
d: 17, 
e: 20
};

const clone = Object.assign({}, add);
clone.d = 20;
console.log(add);
console.log(clone);  

в консоле получаем

{
  d: 17,
  e: 20
}
{
  d: 20,
  e: 20
}

все сработало


		3 способ Частный случай массива, есть методы для создания копии массива при помощи slice()


const oldArray = ['a', 'b', 'c', 'd'];

const newArray = oldArray.slice();

newArray[1] = 'dadadadad';
console.log(newArray);
console.log(oldArray);

и все сработала, мы получили обсолютно 2 разных массива 


		Новые стандарты ES6-ES8  для создания поверхностной копии будет использование оператора разварота (оператор спред)


		const video = ['youtube', 'vimeo', 'rutube'],
			blogs = ['wordpress', 'livejournal', 'blogger'],
      internet = [...video, ...blogs, 'vk', 'facebook'];
      
      console.log(internet);  и у нас все получилось мы получили массив с данными 



		Усложним,  сделаем с функцией 

function log(a, b, c) {
      console.log(a);
      console.log(b);
      console.log(c);				С ТАКОЙ КОНСТРУКЦИЕЙ МЫ БУДЕМ РАБОТАТЬ ЧАСТО !!!!!!!!!!
      }
      
      const num = [2, 5, 7];
      
      log(...num);   и все получилось


			4 способ при помощи спред оператора 


    const array = ['a', 'b'];
     
     const newArray = [...array]; теперь тут лежит копия от array 



